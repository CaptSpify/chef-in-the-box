# Generated by Chef

##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
<%= Dovecot::Conf.attribute(@conf, 'log_path', 'syslog') %>

# Log file to use for informational messages. Defaults to log_path.
<%= Dovecot::Conf.attribute(@conf, 'info_log_path') %>
# Log file to use for debug messages. Defaults to info_log_path.
<%= Dovecot::Conf.attribute(@conf, 'debug_log_path') %>

# Syslog facility to use if you're logging to syslog. Usually if you don't
# want to use "mail", you'll use local0..local7. Also other standard
# facilities are supported.
<%= Dovecot::Conf.attribute(@conf, 'syslog_facility', 'mail') %>

##
## Logging verbosity and debugging.
##

# Log unsuccessful authentication attempts and the reasons why they failed.
<%= Dovecot::Conf.attribute(@conf, 'auth_verbose', false) %>

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
<%= Dovecot::Conf.attribute(@conf, 'auth_verbose_passwords', false) %>

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.
<%= Dovecot::Conf.attribute(@conf, 'auth_debug', false) %>

# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.
<%= Dovecot::Conf.attribute(@conf, 'auth_debug_passwords', false) %>

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
<%= Dovecot::Conf.attribute(@conf, 'mail_debug', false) %>

# Show protocol level SSL errors.
<%= Dovecot::Conf.attribute(@conf, 'verbose_ssl', false) %>

# mail_log plugin provides more event logging for mail processes.
<% if @plugins.has_key?('mail_log') and @plugins['mail_log'].kind_of?(Hash) -%>
<%=  Dovecot::Conf.plugin('mail_log', @plugins['mail_log']) %>
<% else -%>
plugin {
  # Events to log. Also available: flag_change append
  #mail_log_events = delete undelete expunge copy mailbox_delete mailbox_rename
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  #mail_log_fields = uid box msgid size
}
<% end -%>

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
<%= Dovecot::Conf.attribute(@conf, 'log_timestamp', '"%b %d %H:%M:%S "') %>

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.
<%= Dovecot::Conf.attribute(@conf, 'login_log_format_elements', 'user=<%u> method=%m rip=%r lip=%l mpid=%e %c') %>

# Login log format. %$ contains login_log_format_elements string, %s contains
# the data we want to log.
<%= Dovecot::Conf.attribute(@conf, 'login_log_format', '%$: %s') %>
 
# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.
<%= Dovecot::Conf.attribute(@conf, 'mail_log_prefix', '"%s(%u): "') %>

# Format to use for logging mail deliveries. You can use variables:
#  %$ - Delivery status message (e.g. "saved to INBOX")
#  %m - Message-ID
#  %s - Subject
#  %f - From address
#  %p - Physical size
#  %w - Virtual size
<%= Dovecot::Conf.attribute(@conf, 'deliver_log_format', 'msgid=%m: %$') %>
